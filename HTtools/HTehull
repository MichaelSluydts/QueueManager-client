#!/usr/bin/env python
import warnings
warnings.filterwarnings("ignore")
import pymatgen
print(pymatgen.__file__)
from pymatgen.ext.matproj import MPRester
from pymatgen import Composition
from pymatgen.entries.computed_entries import ComputedEntry
from pymatgen.core.units import FloatWithUnit
from pymatgen.analysis.reaction_calculator import ComputedReaction
from pymatgen.apps.borg.hive import VaspToComputedEntryDrone
from pymatgen.apps.borg.queen import BorgQueen
from pymatgen.analysis.phase_diagram import *
from pymatgen.entries.compatibility import MaterialsProjectCompatibility
import re, sys, json, os
drone = VaspToComputedEntryDrone()
queen = BorgQueen(drone, sys.argv[1], 4)
entriesorig = queen.get_data()
queen.load_data(os.path.join(os.path.dirname(__file__), '../ML/data/missingels.json'))
entriesextra = queen.get_data() 

print(entriesorig)

if len(sys.argv) > 2:
    compat = MaterialsProjectCompatibility(check_potcar=False)
    entriesorig = compat.process_entries(entriesorig) 

for entry in entriesorig:
    name = entry.name
    line = re.findall('[A-Z][^A-Z]*',name.replace('(','').replace(')',''))

searchset= set(re.sub('\d',' ',' '.join(line)).split())
entries = filter(lambda e: set(re.sub('\d',' ',str(e.composition).replace(' ','')).split())==searchset, entriesorig)

entriesextra =  filter(lambda e: set(re.sub('\d',' ',str(e.composition).replace(' ','')).split()) & searchset, entriesextra)
#This initializes the REST adaptor. Put your own API key in.
a = MPRester("s2vUo6mzETOHLdbu")
#unknownEls = set(['Po','Ra'])

#if unknownEls & searchset:
#    print('99', None)
#    exit()

#print(a.get_stability(entriesorig))
all_entries = a.get_entries_in_chemsys(set(searchset)) + list(entries) + list(entriesextra)

pd = PhaseDiagram(all_entries)

def name(potcar):
    name = ''
    for p in potcar:
        temp = (p.split(' ')[-2].split('_')[0])
        name += temp
    return name
for e in pd.stable_entries:
    if e.entry_id == None:
        reaction = pd.get_equilibrium_reaction_energy(e)
        print(reaction,None)

for e in pd.unstable_entries:
    decomp, e_above_hull = pd.get_decomp_and_e_above_hull(e)
    pretty_decomp = [("{}:{}".format(k.composition.reduced_formula, k.entry_id), round(v, 2)) for k, v in decomp.items()]
    if e.entry_id == None:
        print(e_above_hull,pretty_decomp)
